name: e2e tests

on:
  workflow_call:
    inputs:
      e2e-timeout:
        description: "Timeout in minutes"
        default: 20
        required: false
        type: number
      retries:
        description: "Number of retries"
        default: 2
        required: false
        type: number
      registry_id:
        description: "YC registry ID"
        default: "crpo9tj76o3c7pi8i72n"
        required: false
        type: string
      image_name:
        description: "Hot-testing image name"
        default: "e2e_new_frontend"
        required: false
        type: string
      template_bucket:
        description: "Bucket with actual statics"
        default: "mindbox-newfrontend-templates"
        required: false
        type: string
      template_folder:
        description: "Folder in bucket with actual statics"
        default: "microapps"
        required: false
        type: string
      core_project:
        description: "True if project is frontend_core_v2"
        default: false
        required: false
        type: boolean
    secrets:
      npm_token:
        description: 'A GH_NPM_REGISTRY token passed from the caller workflow'
        required: true
      frontend_gha_full_token:
        description: 'A FRONTEND_GHA_FULL_TOKEN token passed from the caller workflow'
        required: true
      kube_dev_config:
        description: 'A DEV_FRONTEND_GHA_KUBE_CONFIG_DATA token passed from the caller workflow'
        required: true
      container_registry_key:
        description: 'A CONTAINER_REGISTRY_KEY token passed from the caller workflow'
        required: true
      bucket_access_id:
        description: 'A NEW_FRONTEND_STAGING_TEMPLATE_BUCKET_KEY_ID token passed from the caller workflow'
        required: true
      bucket_access_key:
        description: 'A NEW_FRONTEND_STAGING_TEMPLATE_BUCKET_ACCESS_KEY token passed from the caller workflow'
        required: true
      cypress_login:
        description: 'A CYPRESS_LOGIN token passed from the caller workflow'
        required: true
      cypress_pass:
        description: 'A CYPRESS_PASSWORD token passed from the caller workflow'
        required: true
      cypress_record_key:
        description: 'A cypress dashbord project key'
        required: true

jobs:
  prepare-site:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.ref, 'LocalizationPull') }}
    env:
      retries: ${{ inputs.retries }}
      CYPRESS_username: "${{ secrets.cypress_login }}"
      CYPRESS_password: "${{ secrets.cypress_pass }}"
      registry: cr.yandex/${{ inputs.registry_id }}
      image: ${{ inputs.image_name }}
      template_bucket: ${{ inputs.template_bucket }}
      template_folder: ${{ inputs.template_folder }}

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set variables
        run: |
          echo "ref_name=$(cat $GITHUB_EVENT_PATH | jq '.ref' | sed 's/refs\/heads\///g' | sed 's/\"//g' | sed 's/[_.\/#]/-/g' | tr '[A-Z]' '[a-z]')" >> $GITHUB_ENV
          echo "repository_name=$(cat $GITHUB_EVENT_PATH | jq '.repository.name' | sed 's/\"//g')" >> $GITHUB_ENV
        id: set_variables

      - name: Get branch and repo names hash
        run: echo "hash_payload=$(echo $BRANCH_AND_REPO | md5sum | sed 's/  -//g')"  >> $GITHUB_ENV
        id: branch_and_repo_hash
        env:
          BRANCH_AND_REPO: "${{ env.repository_name }}-${{ env.ref_name }}"

      - name: Set project path
        run: |
          project_name=$(cat ./package.json | jq .name | sed -s 's/@mindbox-moscow\///g' | sed -s 's/-/_/g' | sed -s 's/"//g')
          if [[ $project_name == "frontend_core_v2" ]]; then
            echo "project_folder=core" >> $GITHUB_ENV
            echo "project_name=core" >> $GITHUB_ENV
          else
            echo "project_folder=$project_name" >> $GITHUB_ENV
            echo "project_name=$project_name" >> $GITHUB_ENV
          fi
        id: set_project

      - name: Setup Node.JS
        uses: actions/setup-node@v1
        with:
          always-auth: true
          node-version: "12.x"
          registry-url: "https://npm.pkg.github.com/mindbox-moscow"

      - name: Get node modules from cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: npm-ci-${{ github.sha }}

      - name: Disable Lefthook
        run: echo "LEFTHOOK=0" >> $GITHUB_ENV

      - name: Build and format npm-package
        run: npm run build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm_token }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.npm_token }}

      - name: Checkout frontend-deploy repository
        uses: actions/checkout@v2
        with:
          repository: mindbox-moscow/frontend-deploy
          token: ${{ secrets.frontend_gha_full_token }}
          path: ./hot_build

      - name: Create proto-html folder
        run: |
          mkdir -p ./hot_build/proto-html/static

      - name: Get templates from S3
        uses: imehedi/actions-awscli-v2@latest
        with:
            args: s3 --endpoint-url=https://storage.yandexcloud.net cp --recursive s3://${{ env.template_bucket }}/${{ env.template_folder }} ./hot_build/proto-html/static/
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.bucket_access_id }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.bucket_access_key }}
            AWS_DEFAULT_REGION: "ru-central1"

      - name: Renew actual project files in template folder
        run: |
          [ -d ./hot_build/proto-html/static/${{ env.project_folder }} ] && sudo rm -rvf ./hot_build/proto-html/static/${{ env.project_folder }}
          cp -r ./build/static/* ./hot_build/proto-html/static/

      - name: Create initial.js
        run: npm i --prefix concat-index && node concat-index/index.js -o -p ./proto-html
        working-directory: ./hot_build/
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm_token }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.npm_token }}

      - name: Move initial.js to tmp folder
        run: mv ./proto-html/static/initial.js ./proto-html/initial.js
        working-directory: ./hot_build/

      - name: Create initial-hash.js
        run: npm i --prefix concat-index && node concat-index/index.js -e Staging -p ./proto-html
        working-directory: ./hot_build/
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm_token }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.npm_token }}

      - name: Return initial.js to static folder
        run: mv ./proto-html/initial.js ./proto-html/static/initial.js
        working-directory: ./hot_build/

      - name: Copy Dockerfile to build folder
        run: cp ./hot_build/hot-testing/Dockerfile ./hot_build/proto-html/

      - name: Build docker image
        working-directory: ./hot_build/proto-html/
        run: |
          docker build . -t ${{ env.registry }}/${{ env.image }}/${{ env.ref_name }}:${{ github.sha }}

      - name: Authenticate in yandex registry
        run: echo '${{ secrets.container_registry_key }}' | docker login -u json_key --password-stdin cr.yandex

      - name: Push docker image
        run: docker push ${{ env.registry }}/${{ env.image }}/${{ env.ref_name }}:${{ github.sha }}

      - name: Set variables in deployment.yaml
        working-directory: ./hot_build/e2e/kubernetes
        run: |
          sed -i "s~DOCKER_IMAGE~$DOCKER_IMAGE~g" ./deploy.yml
          sed -i "s~HASH_PAYLOAD~$HASH_PAYLOAD~g" ./deploy.yml
          sed -i "s~CI_COMMIT_SHA~$CI_COMMIT_SHA~g" ./deploy.yml
        env:
          DOCKER_IMAGE: ${{ env.registry }}/${{ env.image }}/${{ env.ref_name }}:${{ github.sha }}
          HASH_PAYLOAD: ${{ env.hash_payload }}
          CI_COMMIT_SHA: ${{ github.sha }}

      - name: Deploy to cluster
        uses: wahyd4/kubectl-helm-action@master
        env:
            # Config file generated by this manual
            # https://cloud.yandex.ru/docs/managed-kubernetes/operations/create-static-conf
          KUBE_CONFIG_DATA: ${{ secrets.kube_dev_config }}
        with:
          args: kubectl apply -f ./hot_build/e2e/kubernetes/deploy.yml

  e2e-tests:
    needs: prepare-site
    runs-on: ubuntu-latest
    strategy:
      # when one test fails, DO NOT cancel the other
      # containers, because this will kill Cypress processes
      # leaving the Dashboard hanging ...
      # https://github.com/cypress-io/github-action/issues/48
      fail-fast: false
      matrix:
        # run 3 copies of the current job in parallel
        containers: [1, 2, 3]
    timeout-minutes: ${{ inputs.e2e-timeout }}
    if: ${{ !contains(github.ref, 'LocalizationPull') }}
    env:
      retries: ${{ inputs.retries }}
      CYPRESS_username: "${{ secrets.cypress_login }}"
      CYPRESS_password: "${{ secrets.cypress_pass }}"
      registry: cr.yandex/${{ inputs.registry_id }}
      image: ${{ inputs.image_name }}
      template_bucket: ${{ inputs.template_bucket }}
      template_folder: ${{ inputs.template_folder }}

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set variables
        run: |
          echo "ref_name=$(cat $GITHUB_EVENT_PATH | jq '.ref' | sed 's/refs\/heads\///g' | sed 's/\"//g' | sed 's/[_.\/#]/-/g' | tr '[A-Z]' '[a-z]')" >> $GITHUB_ENV
          echo "repository_name=$(cat $GITHUB_EVENT_PATH | jq '.repository.name' | sed 's/\"//g')" >> $GITHUB_ENV
        id: set_variables

      - name: Get branch and repo names hash
        run: echo "hash_payload=$(echo $BRANCH_AND_REPO | md5sum | sed 's/  -//g')"  >> $GITHUB_ENV
        id: branch_and_repo_hash
        env:
          BRANCH_AND_REPO: "${{ env.repository_name }}-${{ env.ref_name }}"

      - name: Setup Node.JS
        uses: actions/setup-node@v1
        with:
          always-auth: true
          node-version: "12.x"
          registry-url: "https://npm.pkg.github.com/mindbox-moscow"

      - name: Run E2E tests on not core project.
        if: ${{ !inputs.core_project }}
        uses: cypress-io/github-action@v2
        with:
          start: npm run e2e:ci
          install: true
          config: baseUrl=${{ env.E2E_URL }},retries=${{ env.retries }},videoUploadOnPasses=false,videoCompression=false
          working-directory: e2e
          browser: chrome
          parallel: true
          record: true
        env:
          E2E_URL: https://e2e-testing-${{ env.hash_payload }}.staging.directcrm.ru
          NODE_AUTH_TOKEN: ${{ secrets.npm_token }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.npm_token }}
          CYPRESS_RECORD_KEY: ${{ secrets.cypress_record_key }}

      - name: Install YC
        if: ${{ inputs.core_project }}
        run: |
          sudo curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          sudo ln -s /home/runner/yandex-cloud/bin/yc /bin/yc

      - name: Create e2e tests list
        if: ${{ inputs.core_project }}
        run: |
          yc config profile create frontend-ci
          echo '${{ secrets.container_registry_key }}' >> iam_key.json | yc config set service-account-key iam_key.json
          rm iam_key.json
          curl -s -H "Authorization: Bearer $(yc iam create-token)" $URL?repositoryName=${{ inputs.registry_id }}/frontend-e2e | jq -r ".images[].tags[]?" | sed 's/-latest//g'  > ./e2e_tests.txt
        env:
          URL: "https://container-registry.api.cloud.yandex.net/container-registry/v1/images"

      - name: Run E2E tests on core project.
        if: ${{ inputs.core_project }}
        run: |
          IFS=$'\n'; set -f; E2E_TESTS=($(cat ./e2e_tests.txt))
          for e2e in "${E2E_TESTS[@]}"
          do
            [ -d ./cypress/$e2e ] && mkdir -p ./cypress/$e2e
            mkdir -p ./cypress/$e2e/videos && mkdir -p ./cypress/$e2e/screenshots

            docker run -i \
              --pull always \
              -e BASE_URL="${{ env.E2E_URL }}" \
              -e RETRIES="${{ env.retries }}" \
              -e CYPRESS_username=${{ secrets.cypress_login }} \
              -e CYPRESS_password=${{ secrets.cypress_pass }} \
              -v $(pwd)/cypress/$e2e/videos:/e2e/cypress/videos \
              -v $(pwd)/cypress/$e2e/screenshots:/e2e/cypress/screenshots \
              cr.yandex/${{ inputs.registry_id }}/frontend-e2e:$e2e-latest 2>&1
          done
        env:
          E2E_URL: https://e2e-testing-${{ env.hash_payload }}.staging.directcrm.ru

      - name: Upload test results artifacts
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress-${{ env.project_name }}
          path: e2e/cypress
          retention-days: 1

      - name: Add comment to commit if the job has failed
        if: ${{ failure() }}
        run: |
          jq -nc '{"body": ":negative_squared_cross_mark: E2E tests failed. Check logs at\nhttps://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' | \
          curl -sL -X POST -d @- \
            -H "Content-Type: application/json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/comments"

